<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[2017读书清单]]></title>
      <url>/2017/11/05/readinglist2017/</url>
      <content type="html"><![CDATA[<h2 id="2017读书清单"><a href="#2017读书清单" class="headerlink" title="2017读书清单"></a>2017读书清单</h2><ol>
<li>迷人的材料</li>
<li>Kubernetes权威指南</li>
<li>Docker容器与容器云</li>
<li>人类简史</li>
<li>Go语言编程</li>
<li>财富自由之路</li>
<li>智能时代</li>
<li>Twenty Thousand Leagues Under the Sea (还未看完)</li>
<li>Originals: How Non-Conformists Move the World</li>
<li>Go程序设计语言(大概看了一下)</li>
</ol>
<p>还有一些零星的书和Paper没有列出来。还有两篇想读的Paper还没有看完，sad</p>
<ol>
<li>bitcoin a peer-to-peer electronic cash system</li>
<li>MapReduce: Simplified Data Processing on Large Clusters</li>
</ol>
<p>很惭愧，因为今年重心全放在了工作，社区工作和GRE单词上,并没有读多少书….</p>
<p>不过今年估计最少又掌握了一些新单词(整理出了一个整本单词本),相比去年拙劣的考分，如果明年年初再考一次估计Verbal会有长远进步…</p>
<p>另外今年还听了一些书评，这里也顺便列出来，以后有空把这些原版给读了(优先级并不高)</p>
<ol>
<li>Homo Deus: A Brief History of Tomorro </li>
<li>Trying not to try: The Art and Science of Spontaneity</li>
<li>Messy: The Power of Disorder to Transform Our Lives</li>
<li>Algorithms to Live By: The computer Science of Human Decisions</li>
<li>Success and Luck: Good Fortune and the Myth of Meritocracy</li>
<li>The End of Average: How We Succeed in a World That Values Sameness</li>
<li>The Attention Merchants: The Epic Scramble to Get Inside Our Heads</li>
<li>Hit Makers: How Things Become Popular</li>
<li>Stretch: Unlock the Power of Less- and Achieve More That You Ever Imagined</li>
<li>The Complacent Class: The Self-Defeating Quest fro the American Dream</li>
<li>Tools of Titans: The Tactics, Routines, and Habits of Billionaires, Icons, and World-Class Performers</li>
<li>Sensemaking: The Power of the Humanities in the Age of the Algorithm</li>
<li>Decisive: How to make better choices in life and work</li>
<li>Option B: Facing Adversity, Building Resilience, and Finding Joy (Sheryl SandBerg)</li>
<li>Everybody Lies: Big Data, New Data, and What the Internet Can Tell Us About Who We Really Are</li>
<li>Barking Up the Wrong Tree: The surprising Science Behind Why Everything You Know About Success Is Wrong</li>
<li>Astrophysics for People in a Hurry</li>
<li>Stealing Fire: How Silicon Valley, the Navy SEALs, and Maverick Scientists Are Revolutionzing the Way We live and Work</li>
<li>The Telomere Effect: A Rveolutionary Approach to Living Younger, Healthier, Longer (重点)</li>
<li>Popular: The Power of Likability in a Status- Obsessed World</li>
<li>Peak Performance: Elevate Your Game, Avoid Burnout, and Thrive with the New Science of Success (重点,感受颇深)</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[《Go语言编程》读书笔记]]></title>
      <url>/2017/11/04/golang1/</url>
      <content type="html"><![CDATA[<h2 id="《Go语言编程》读书笔记"><a href="#《Go语言编程》读书笔记" class="headerlink" title="《Go语言编程》读书笔记"></a>《Go语言编程》读书笔记</h2><h2 id="顺序编程"><a href="#顺序编程" class="headerlink" title="顺序编程"></a>顺序编程</h2><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>同是静态类型语言的Go作用域和C语言类似，虽然变量在栈上(stack)还是堆上(heap)是由编译器决定，这点和C语言用户自己决定不一样，但是作用于访问还是类似的，比如如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func f() &#123;</div><div class="line">	n := 999;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Println(n) //这里是不能访问一个函数内的变量的</div></pre></td></tr></table></figure></p>
<p>但是golang支持闭包，所以这样是可以的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">func f() func()int &#123;</div><div class="line">	n := 999;</div><div class="line">	return func() int&#123;</div><div class="line">		return n</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	f1 := f()</div><div class="line">	fmt.Println(f1())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>闭包的简单定义是<code>能够读取其他函数内部变量的函数</code>,并且这里函数内的变量<code>n</code>一定是在堆上，这点C语言是没办法做到的，除非堆上malloc一个变量。</p>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><p>类型系统里比较重要的两个概念<code>Pass By Reference</code>和 <code>Pass By Value</code>。<br>在C语言里处理数组在函数传递的时候比较特别是<code>Pass By Reference</code>,其他对象都是<code>Pass By Value</code> 结构体里的数组也不例外，在C语言中如下是等价的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">如果函数是test(a), a 是一个数组</div><div class="line">void test(int * p) &#123;</div><div class="line">    *(p+1) = 1;</div><div class="line">&#125; </div><div class="line"></div><div class="line">void test(int p[]) &#123;</div><div class="line">    p[1] = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后Go语言这点不太一样数组是<code>Pass By Reference</code>的。然后Go语言引入了一种叫做切片(Slice)的类型,这个有点像C的数组，切片和数组看起来十分形似，唯一的区别实在声明的时候：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//That is a slice:</div><div class="line">var av = []int&#123;1,5,2,3,7&#125;</div><div class="line"></div><div class="line">//And those are arrays:</div><div class="line">var av = [...]int&#123;1,5,2,3,7&#125;</div><div class="line">var bv = [5]int&#123;1,5,2,3,7&#125;</div></pre></td></tr></table></figure></p>
<p>另外数组可以转换成切片通过这个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sli := arr[:]</div></pre></td></tr></table></figure></p>
<h4 id="Go语言有四种特殊的类型通常是看作Pass-by-Reference的"><a href="#Go语言有四种特殊的类型通常是看作Pass-by-Reference的" class="headerlink" title="Go语言有四种特殊的类型通常是看作Pass by Reference的"></a>Go语言有四种特殊的类型通常是看作<code>Pass by Reference</code>的</h4><ol>
<li>切片(Slice)</li>
<li>接口(Interface)</li>
<li>Map</li>
<li>Channel</li>
</ol>
<h2 id="结构体部分"><a href="#结构体部分" class="headerlink" title="结构体部分"></a>结构体部分</h2><p>匿名引用指针和值引用的区别</p>
<p>C++的虚基类引出区别,首先讲一下虚基类</p>
<p><img src="virtualbase.jpg" alt=""></p>
<p>在C++中如果基类A分支出两个子类B和C，然后孙子类D同时又继承了B和C,这时基类A中有有一个成员变量是一个公共的属性，比如department,而孙子类既然享受了继承的好处，但是如果想调用name的话编译器会又一个问题，就是不知道是用从那个分支继承下来的成员变量，这个时候如果这个department一个大家共用的属性,这样多重继承下来不仅有数据冗余同时还要每次显示告诉编译器使用从那个分支继承下来的变量，非常麻烦，C++在这里引入了虚继类的概念<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class A&#123;</div><div class="line">protected:</div><div class="line">    int department;</div><div class="line">&#125;;</div><div class="line">//直接基类B</div><div class="line">class B: virtual public A&#123;  //虚继承</div><div class="line">protected:</div><div class="line">    int department;</div><div class="line">&#125;;</div><div class="line">//直接基类C</div><div class="line">class C: virtual public A&#123;  //虚继承</div><div class="line">protected:</div><div class="line">    int department;</div><div class="line">&#125;;</div><div class="line">//派生类D</div><div class="line">class D: public B, public C&#123;</div></pre></td></tr></table></figure></p>
<p>这样这里的department其实就只有一份，不管哪里的修改都是对A的department进行修改，其实原理也很简单，就是用指针，然后大家都共享A变量的那一块内存就行了呗,Go在这里的实现非常的直白</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">type A struct &#123;</div><div class="line">	department int</div><div class="line">&#125;</div><div class="line"></div><div class="line">type B struct &#123;</div><div class="line">	base *A</div><div class="line">&#125;</div><div class="line"></div><div class="line">type C struct &#123;</div><div class="line">	base *A</div><div class="line">&#125;</div><div class="line"></div><div class="line">type D struct &#123;</div><div class="line">	b B</div><div class="line">	c C</div><div class="line">&#125;</div><div class="line"></div><div class="line">var d = new(D)</div><div class="line">d.b.base = new(A)</div><div class="line">d.c.base = d.b.base //都是同一块内存指向</div><div class="line">d.b.base.department = 999</div><div class="line">fmt.Println(d.b.base.department)</div><div class="line">fmt.Println(d.c.base.department)</div></pre></td></tr></table></figure>
<h2 id="结构体组合"><a href="#结构体组合" class="headerlink" title="结构体组合"></a>结构体组合</h2><p>匿名组合</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="侵入性和非侵入性"><a href="#侵入性和非侵入性" class="headerlink" title="侵入性和非侵入性"></a>侵入性和非侵入性</h3><p>不同于java, C++ 这类接口我们称为侵入式接口。<br>“侵入式”的主要表现在于实现类需要明确声明自己实现了某个接口。</p>
<p>这种强制性的接口继承是面向对象编程思想发展过程中<br>一个遭受相当多置疑的特性。</p>
<h3 id="侵入式接口的两个问题"><a href="#侵入式接口的两个问题" class="headerlink" title="侵入式接口的两个问题"></a>侵入式接口的两个问题</h3><p>正是因为这种不合理的设计，实现Java、Csharp类库中的每个类时都需要纠结以下两个问题。<br> 问题1:我提供哪些接口好呢?<br> 问题2:如果两个类实现了相同的接口，应该把接口放到哪个包好呢?</p>
<p>接口赋值的一个代码的例子</p>
<ol>
<li>接口包含两个方法其中一个值引用，一个地址引用，赋值变量应该用值还是地址?</li>
<li>接口方法之间赋值，只要是子集，就可以赋值,并且顺序无关</li>
</ol>
<h2 id="接口查询接口组合"><a href="#接口查询接口组合" class="headerlink" title="接口查询接口组合"></a>接口查询接口组合</h2><p>只看类C代码实现</p>
<h3 id="空接口-interface"><a href="#空接口-interface" class="headerlink" title="空接口  {}interface"></a>空接口  {}interface</h3><p>可以做泛型编程而不需要空指针</p>
<h2 id="并发编程-go-routinue"><a href="#并发编程-go-routinue" class="headerlink" title="并发编程 go routinue"></a>并发编程 go routinue</h2><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>Type 和 Value</p>
<p>reflect.TypeOf()</p>
<p>reflect.ValueOf() //这里是值拷贝 可以用CanSet()函数来判断</p>
<p>所以要想得到理想的reflect工作流<br>需要首先  v = ValueOf(&amp;x) 但是地址是不能直接Set的，要 v.Elem() 之后再Set()</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Kubernetes 架构 Overview]]></title>
      <url>/2017/09/01/kubernetes1/</url>
      <content type="html"><![CDATA[<p><img src="overview.png" alt=""></p>
<h4 id="Master-Node-架构"><a href="#Master-Node-架构" class="headerlink" title="Master/Node 架构"></a>Master/Node 架构</h4><p>Master相当于中心控制集群其中Master中的APIServer和etcd交流，Node相当于工作集群用来和docker daemon/runc 打交道实际操作管理容器，这里需要注意的是etcd是一个分布式的KV存储系统,支持WATCH接口,通过http long poll实现，使用Raft算法保证数据一致性。</p>
<h4 id="Kubernetes实际模块功能"><a href="#Kubernetes实际模块功能" class="headerlink" title="Kubernetes实际模块功能"></a>Kubernetes实际模块功能</h4><p>黄色的部分是运行在Master上的进程，绿色的部分是运行在Node上的进程,紫色的部分是以插件或者pod的形式运行。对于OpenShift,基本的架构都是复用Kubernetes，一部分不同的地方在于kubernets 有许多自己加入的<a href="https://kubernetes.io/docs/admin/admission-controllers/">Admission Controllers</a> 注意这个和第三部分的Controller不是一个概念.当然OpenShift也有一些自己的controller 比如说Build Config, Build, Deployment Config 等等这些kubernetes所没有的功能。</p>
<h4 id="Contronller-简介"><a href="#Contronller-简介" class="headerlink" title="Contronller 简介"></a>Contronller 简介</h4><p>在Kubernets/OpenShift中Controller 是一个非常重要的概念，它的定义其实很简单，就是一个 loop, 通过和APIServer通讯获取它想要的数据，然后比对用户目前想要达成的状态，如果者两者状态不一致，就做一些同步的操作，然后将结构在写回APIServer,其实主要是etcd里，因为在Kubernetes/OpenShift中，所有的资源都是以Json的形式持久华在etcd中，而etcd只和APIServer打交道。</p>
<p><img src="controller.jpeg" alt=""></p>
<p>这里有一个简单的controller 的<a href="https://github.com/caesarxuchao/servicelookup">example</a></p>
<h4 id="Pod或Replication-Controller创建的时序图"><a href="#Pod或Replication-Controller创建的时序图" class="headerlink" title="Pod或Replication Controller创建的时序图"></a>Pod或Replication Controller创建的时序图</h4><p>这里我画了两个时序图，关于一个Pod是如何创建的，一个RC是如果创建的，这里contoller mananger 是所有generic controller 的一个集合的进程(目前所有的<a href="https://github.com/kubernetes/kubernetes/tree/master/pkg/controller">kubernetes controller</a>), 而Scheduler虽然不是一个generic 的controller,但是他的行为模式和controller 是没有区别的 Scheduler相关的<a href="https://github.com/kubernetes/kubernetes/tree/master/plugin/pkg/scheduler">代码路径</a>。</p>
<p><img src="pod.png" alt=""></p>
<p><img src="rc.png" alt=""></p>
<h4 id="Kubernetes-网络解决方案"><a href="#Kubernetes-网络解决方案" class="headerlink" title="Kubernetes 网络解决方案"></a>Kubernetes 网络解决方案</h4><p>首先，kubernetes Docker 在网络方面都没有提供完整的解决方案，对于在不同网段的两个Pod,他们之间是无法直接通讯的，所以这里有几种解决方案</p>
<p><img src="node1.png" alt=""></p>
<h5 id="1-Node桥接模式"><a href="#1-Node桥接模式" class="headerlink" title="1.Node桥接模式"></a>1.Node桥接模式</h5><p>docker0相当于一台交换机，而用一根网线把两个交换机桥接起来，这样所有在这个交换机上的设备就可以通信，但是缺点就是ARP风暴和安全问题</p>
<p><img src="node2.png" alt=""></p>
<h5 id="2-Node路由模式"><a href="#2-Node路由模式" class="headerlink" title="2.Node路由模式"></a>2.Node路由模式</h5><p>这种模式需要更改所有Node和链路上所有路由的路由规则，而且每次增删Node都需要增删规则，如果有一套动态路由协议，并且集群都在一个大内网环境，这个网络方案还可行，如果在两个Node在公网上，这个方案无法实现。</p>
<p><img src="node3.png" alt=""></p>
<h5 id="3-隧道模式"><a href="#3-隧道模式" class="headerlink" title="3.隧道模式"></a>3.隧道模式</h5><p>对于公网上的Node如果网段不同只能通过隧道的方式解决，Kubernets本身不提供任何方案，OpenShift 通过Open vSwitch 来解决，我这里介绍了CoreOS的解决方案flannel,其实隧道原理都大同小异。</p>
<p><img src="node4.png" alt=""></p>
<h4 id="Kubernets-Service-的原理介绍"><a href="#Kubernets-Service-的原理介绍" class="headerlink" title="Kubernets Service 的原理介绍"></a>Kubernets Service 的原理介绍</h4><p>首先，Kubernets/OpenShift 的Service是一个负载均衡的概念（或者反向代理)主要实现是使用iptables, iptables是通过写一些规则来转发数据包，而kube-proxy就是用来在Node上操作这些iptables.<br>这里需要注意的是: Service的ip是一个不存在的虚拟ip(仅仅适用与cluster内部),是ping不同的，因为它只存在于etcd里供APIServer和Kube-proxy查询修改iptables来做到数据包转发的作用。</p>
<p>如果需要对外访问，需要配置Service对应的LoadBalancer(这个由Issa基础设施提供，比如AWS,GCE都有相应的LoadBalancer)而OpenShift自己提供了一个router的资源来expose service，另外kubernets社区上有目前也有一个叫ingress的controller/资源来解决Service对外访问的问题。</p>
<p><img src="svc.png" alt=""></p>
<h4 id="其他未涉及的部分"><a href="#其他未涉及的部分" class="headerlink" title="其他未涉及的部分"></a>其他未涉及的部分</h4><p>1.Auth</p>
<p>2.Storage</p>
<p>3.CLI</p>
<p>4.Kube-Dns</p>
<p>5.各种Controller的具体功能</p>
<p>6.Scheduler 具体调度算法</p>
<p>7.Federation Cluster, Federation Service</p>
<p>8.Aggreator APIServer</p>
<p>9.HA Proxy</p>
<p>10.APIServer 多线程下的Optimistic Concurrency Control</p>
<p>11.Admission Controllers</p>
<p>12.etcd 的机制</p>
<p>13.等等</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
